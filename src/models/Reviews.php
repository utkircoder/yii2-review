<?php

namespace whiteSuit\review\models;

use yii\helpers\ArrayHelper;
use common\models\Advert;
use common\models\Product;
use common\models\User;
use whiteSuit\review\behaviors\ReviewsModelBehavior;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\helpers\Html;
use yii\helpers\Url;

/**
 * This is the model class for table "reviews".
 *
 * @property int $id
 * @property int $user_id
 * @property int $type
 * @property string $session_id
 * @property string $comment
 * @property string $name
 * @property float $rating
 * @property int $status
 * @property int $created_at
 * @property int $updated_at
 * @property int $modelid
 *
 * @property AdvertReviews[] $advertReviews
 * @property ProductReviews[] $productReviews
 * @property User $user
 */
class Reviews extends \yii\db\ActiveRecord
{

    const TYPE_PRODUCT = 1;
    const TYPE_ADVERT = 2;

    const STATUS_ACTIVE = 1;
    const STATUS_DEACTIVE = 0;

    const SCENARIO_USER = 'scenario_user';
    const SCENARIO_GUEST = 'scenario_guest';


    private $_model_id;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'reviews';
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios[self::SCENARIO_USER] = ['user_id'];
        $scenarios[self::SCENARIO_GUEST] = ['session_id'];

        return $scenarios;
    }


    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(),[
            'date_filter' => [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],
            'review-model'=>[
                'class'=>ReviewsModelBehavior::className(),
                'attributeName' => 'modelid',
                'typeAttributeName' => 'type',
                'model_types' => [
                    Reviews::TYPE_PRODUCT =>[
                        'className'=>'common\models\Product',
                        'linkAttributeName'=>'id',
                        'condition'=>['status'=>Product::STATUS_ACTIVE],
                        'relationName'=>'products'
                    ],
                    Reviews::TYPE_ADVERT =>[
                        'className'=>'common\models\Advert',
                        'condition'=>[],
                        'linkAttributeName'=>'id',
                        'relationName'=>'adverts'
                    ],
                ]
            ]

        ]); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['user_id', 'status','type'], 'integer'],
            [['comment'], 'string'],
            [['session_id','name'], 'string', 'max' => 255],
            ['rating','number'],
            [['created_at', 'updated_at'],'integer'],
            ['type','safe'],
            ['user_id','required','on' => self::SCENARIO_USER],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id'],'on' => self::SCENARIO_USER],
            ['session_id','required','on' => self::SCENARIO_GUEST],
            [['modelid'],'safe']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'user_id' => Yii::t('app', 'User ID'),
            'session_id' => Yii::t('app', 'Session ID'),
            'comment' => Yii::t('app', 'Comment'),
            'rating' => Yii::t('app', 'Rating'),
            'status' => Yii::t('app', 'Status'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'name' => Yii::t('app', 'Name'),
        ];
    }

    public function scenarioSet()
    {
        if (!Yii::$app->user->isGuest) {
            $this->scenario = self::SCENARIO_USER;
        } else {
            $this->scenario = self::SCENARIO_GUEST;
        }
    }
    public static function getStatusDropdown()
    {
        return [
            self::STATUS_ACTIVE => Yii::t('app', 'Active'),
            self::STATUS_DEACTIVE => Yii::t('app', 'De Active'),

        ];
    }
    /**
     * @return mixed
     */
    public function getStatusName()
    {
        return ArrayHelper::getValue(self::getStatusDropdown(),$this->status);
    }

    public static function getTypeDropdown()
    {
        return [
            self::TYPE_ADVERT => Yii::t('app', 'Advert'),
            self::TYPE_PRODUCT => Yii::t('app', 'Product'),

        ];
    }
    /**
     * @return mixed
     */
    public function getTypeName()
    {
        return ArrayHelper::getValue(self::getTypeDropdown(),$this->type);
    }

    public function setModelid($value)
    {
        $this->_model_id = $value;
    }

    public function getModelid()
    {
       return $this->_model_id ;
    }

    public function getUserType()
    {
        if ($this->user_id > 0) {
            return Yii::t('app', 'User');
        }
        if (strlen($this->session_id) > 0) {
            return Yii::t('app', 'Guest');
        }
        return Yii::t('app','No type');
    }

    public function getUsername()
    {
        if($this->user_id > 0){
            $user = $this->user;
            return $user ? $user->username: Yii::t('app','No name');
        }
        if(strlen($this->session_id) > 0){
            return Yii::t('app','Guest');
        }
        return Yii::t('app','No name');
    }

    public function getProductInfo()
    {
        $models = $this->products;
        if($models){
            return $models[0]->title;
        }
        return Yii::t('app','Not Found Product');
    }

    public function getAdvertInfo()
    {
        $models = $this->adverts;
        if($models){
            return $models[0]->title;
        }
        return Yii::t('app','Not Found Advert');
    }

    public function getReviewedModelInfo()
    {
        if($this->type == self::TYPE_PRODUCT){
            return $this->getProductInfo();
        }

        if($this->type == self::TYPE_ADVERT){
            return $this->getAdvertInfo();
        }
       return Yii::t('app','Not Found ');
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAdvertReviews()
    {
        return $this->hasMany(AdvertReviews::className(), ['review_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAdverts()
    {
        return $this->hasMany(Advert::className(),['id'=>'advert_id'])->via('advertReviews');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductReviews()
    {
        return $this->hasMany(ProductReviews::className(), ['review_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProducts()
    {
        return $this->hasMany(Product::className(),['id'=>'product_id'])->via('productReviews');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    /**
     * {@inheritdoc}
     * @return \common\modules\review\queries\ReviewsQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\modules\review\queries\ReviewsQuery(get_called_class());
    }

    public static function getTypeList()
    {
        return [
            self::TYPE_ADVERT,
            self::TYPE_PRODUCT
        ];
    }
}
